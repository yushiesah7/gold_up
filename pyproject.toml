
[tool.ruff]
# Lint + Format を Ruff で一本化
target-version = "py311"
line-length = 100
indent-width = 4
extend-exclude = ["build/", "dist/", ".venv/", ".mypy_cache/", ".pytest_cache/", "migrations/"]

[tool.ruff.lint]
# 実用重視の安全セット
# E,F : pycodestyle/pyflakes 基本
# I   : import 並び替え
# UP  : pyupgrade（文法の近代化）
# B   : flake8-bugbear（潜在バグ）
# SIM : flake8-simplify（無駄な分岐）
# PL  : Pylint の一部（過激なのは Ruff 側で厳選）
# RUF : Ruff 独自の有益チェック
select = ["E", "F", "I", "UP", "B", "SIM", "PL", "RUF"]

# 初期は厳しすぎない設定（必要になれば段階的に追加）
ignore = [
  # 例: ドキュストリングの全強制は初期段階では無効（pydocstyle 相当）
  "D",
  # 例: 過度な複雑度系は後で導入
  "C90",
  # 日本語ドキュメントでの全角記号を許容（曖昧なUnicode文字の警告を無視）
  "RUF001",  # Ambiguous unicode character
  "RUF002",  # Docstring contains ambiguous unicode character
  "RUF003",  # Comment contains ambiguous unicode character
  # 一旦、複雑度/分岐/引数数/三項演算子の過度な指摘は無効化
  "PLR0911",  # Too many return statements
  "PLR0912",  # Too many branches
  "PLR0913",  # Too many arguments in function definition
  "SIM108",   # Use ternary operator instead of if-else
]

# テストではハードコード値（マジックナンバー）を許容
[tool.ruff.lint.per-file-ignores]
"trade_app/tests/**/*.py" = ["PLR2004"]

[tool.ruff.format]
# Ruff formatter を使用（Black 互換の自動整形）
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.ruff.lint.isort]
# import 並び替え（アプリのトップレベルを first-party として認識）
known-first-party = ["trade_app"]
combine-as-imports = true

# 将来、段階導入するルールのメモ（必要になれば select に追加）
# - "ANN" : 型注釈の強制（public API に限定して追加推奨）
# - "ARG" : 未使用引数検出（テストで誤検出が多いなら保留）
# - "DTZ" : タイムゾーン安全性（運用でUTC徹底後に導入）

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["trade_app/tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = [
  "-q",            # 端的な出力
  "-ra",           # スキップ・失敗理由を短く表示
  "--maxfail=1",   # 作業を止めないため、まず1件で中断
  "--durations=10" # 遅いテストの可視化
]
# 過度に厳しい warnings-as-error は初期は無効。
# 将来、nightly CI での段階導入を推奨。
filterwarnings = [
  "default",
]

[tool.coverage.run]
branch = true
source = ["trade_app"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 70  # 初期は低め。品質向上に合わせ段階引き上げ。

# FYI: packaging/ビルド設定を追加する場合に利用（今は最小に留める）

[build-system]
requires = ["setuptools>=69", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "golden-dragon-generator"
version = "0.1.0"
requires-python = ">=3.11"
dependencies = [
    "MetaTrader5",
    "pandas",
    "python-dotenv",
    "pyyaml>=6.0.2",
    "structlog",
    "typer>=0.12",
    "pydantic>=2.4",
    "pydantic-settings>=2.3",
    "pytz>=2024.1",
    # vectorbtpro は uv.sources で管理するのでここから削除
    "pyarrow>=21.0.0",
    "pytest>=8.4.2",
    "optuna>=4.5.0",
    "vectorbtpro>=2025.7.27",
]

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "ruff>=0.12.12",
]

[tool.uv.sources]
vectorbtpro = { git = "ssh://git@github.com/polakowo/vectorbt.pro.git" }


[tool.setuptools]
# find でサブパッケージを含めて自動検出
packages = { find = { where = ["."], include = ["trade_app*"], exclude = ["trade_app/tests*"] } }


